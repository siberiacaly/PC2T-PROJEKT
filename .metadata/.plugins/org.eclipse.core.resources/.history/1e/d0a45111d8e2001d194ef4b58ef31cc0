package ProjectFilms;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class DBControl {
	
	public static void createDatabase() {
		Connection conn = DBConnection.getDBConnection();

        try (Statement stmt = conn.createStatement()){
        	
            String create = "CREATE TABLE featurefilms " +
                         "(name VARCHAR(50) PRIMARY KEY, " +
                         " director VARCHAR(50), " +
                         " year INTEGER, " + 
                         " actors VARCHAR(100), " +
                         " ratings VARCHAR(200))";
            stmt.executeUpdate(create);

            create = "CREATE TABLE animatedfilms " +
                    "(name VARCHAR(50) PRIMARY KEY, " +
                    " director VARCHAR(50), " +
                    " year INTEGER, " + 
                    " age INTEGER, " +
                    " animators VARCHAR(100), " +
                    " ratings VARCHAR(200))";

            stmt.executeUpdate(create);
            
        } catch (Exception e) {
        	e.printStackTrace();
        }
    }
	
	public static void saveFilms() {
		List<Films> featureFilms = new ArrayList<Films>();
		List<Films> animatedFilms = new ArrayList<Films>();
		Connection conn = DBConnection.getDBConnection();
		
		for(Films film : Films.Films) {
			if(film instanceof FeatureFilm)
				featureFilms.add(film);
			else if(film instanceof AnimatedFilm)
				animatedFilms.add(film);
		}
		
		String insert = "INSERT INTO featurefilms " + "(name, director , year, actors, ratings)" + "VALUES(?,?,?,?,?)";
		String actors = "";
		String ratings = "";
		String comment;
		for(Films featurefilm : featureFilms) {
			
			for (int i = 0; i < ((FeatureFilm)featurefilm).getActors().size(); i++) {
	            actors += ((FeatureFilm)featurefilm).getActors().get(i).getName();
	            if (i < ((FeatureFilm)featurefilm).getActors().size() - 1) {
	                actors += ",";
	            }
			}
			
			for (int i = 0; i < ((FeatureFilm)featurefilm).getRatings().size(); i++) {
	            ratings += (((FeatureFilm)featurefilm).getRatings().get(i).getStars() + "#");
	            comment = (((FeatureFilm)featurefilm).getRatings().get(i).getComment());
	            if(comment == null) {
	            	ratings += " ";
	            }
	            else {
	            	ratings += comment;
	            }
	            if (i < (((FeatureFilm)featurefilm).getRatings().size() - 1)) {
	                ratings += "$";
	            }
	        }
			
				try (PreparedStatement prStmt = conn.prepareStatement(insert)) {
				      prStmt.setString(1, featurefilm.getName());
				      prStmt.setString(2, featurefilm.getDirector());
				      prStmt.setInt(3, featurefilm.getYear());
				      prStmt.setString(4, actors);
				      prStmt.setString(5, ratings);

				      prStmt.executeUpdate();
				    } 
				catch (SQLException e) {
				      e.printStackTrace();
				    }
		}
		
		
		insert = "INSERT INTO animatedfilms " + "(name, director , year, age, animators, ratings)" + "VALUES(?,?,?,?,?,?)";
		String animators = "";
		for(Films animatedfilm : animatedFilms) {
			
			for (int i = 0; i < ((AnimatedFilm)animatedfilm).getAnimators().size(); i++) {
	            animators += ((AnimatedFilm)animatedfilm).getAnimators().get(i).getName();
	            if (i < ((AnimatedFilm)animatedfilm).getAnimators().size() - 1) {
	                animators += ",";
	            }
			}
			
			for (int i = 0; i < ((AnimatedFilm)animatedfilm).getRatings().size(); i++) {
	            ratings += (((AnimatedFilm)animatedfilm).getRatings().get(i).getPoints() + "#");
	            comment = (((AnimatedFilm)animatedfilm).getRatings().get(i).getComment());
	            if(comment == null) {
	            	ratings += " ";
	            }
	            else {
	            	ratings += comment;
	            }
	            if (i < (((AnimatedFilm)animatedfilm).getRatings().size() - 1)) {
	                ratings += "$";
	            }
	        }
			
				try (PreparedStatement prStmt = conn.prepareStatement(insert)) {
				      prStmt.setString(1, animatedfilm.getName());
				      prStmt.setString(2, animatedfilm.getDirector());
				      prStmt.setInt(3, animatedfilm.getYear());
				      prStmt.setInt(4, (((AnimatedFilm)animatedfilm).getAge()));
				      prStmt.setString(5, animators);
				      prStmt.setString(6, ratings);

				      prStmt.executeUpdate();
				    } 
				catch (SQLException e) {
				      e.printStackTrace();
				    }
		}
		DBConnection.closeConnection();
	 }
	
	public static void clearFilms() {
		Connection conn = DBConnection.getDBConnection();
		String delete = "DELETE FROM featurefilms";
		
		try (Statement stmt = conn.createStatement()){
			stmt.executeUpdate(delete);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		delete = "DELETE FROM animatedfilms";
		try (Statement stmt = conn.createStatement()){
			stmt.executeUpdate(delete);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static void loadFilms() {
		Connection conn = DBConnection.getDBConnection();
		String select = "SELECT * FROM featurefilms";
       
		try (Statement stmt = conn.createStatement();){
			
			ResultSet rs = stmt.executeQuery(select);
			String name, director;
			int year;
			String actorString, ratingString;
			String[] actorNames, ratings, ratingParts;
	        while (rs.next()) {
	            name = rs.getString("name");
	            director = rs.getString("director");
	            year = rs.getInt("year");
	            actorString = rs.getString("actors");
	            ratingString = rs.getString("ratings");
	            Films.Films.add(new FeatureFilm(name, director, year));
	            
	            actorNames = actorString.split(",");
		        for (String actorName : actorNames) {
		                FeatureFilm.addActor(name, actorName);
		        }
		        
		        ratings = ratingString.split("\\$");
		        for (String rating : ratings) {
		        	 ratingParts = rating.split("#");
		        	if(ratingParts[1].equals(" "))
		        		FeatureFilm.addRating(name, Integer.parseInt(ratingParts[0]));
		        	else
		        		FeatureFilm.addRating(name, Integer.parseInt(ratingParts[0]), ratingParts[1]);
		        }
	        }
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		select = "SELECT * FROM animatedfilms";
		
		try (Statement stmt = conn.createStatement();){
			
			ResultSet rs = stmt.executeQuery(select);
			String name, director;
			int year, age;
			String animatorString, ratingString;
			String[] animatorNames, ratings, ratingParts;
	        while (rs.next()) {
	            name = rs.getString("name");
	            director = rs.getString("director");
	            year = rs.getInt("year");
	            age = rs.getInt("age");
	            animatorString = rs.getString("animators");
	            ratingString = rs.getString("ratings");
	            Films.Films.add(new AnimatedFilm(name, director, year, age));
	            
	            actorNames = actorString.split(",");
		        for (String actorName : actorNames) {
		                FeatureFilm.addActor(name, actorName);
		        }
		        
		        ratings = ratingString.split("\\$");
		        for (String rating : ratings) {
		        	 ratingParts = rating.split("#");
		        	if(ratingParts[1].equals(" "))
		        		FeatureFilm.addRating(name, Integer.parseInt(ratingParts[0]));
		        	else
		        		FeatureFilm.addRating(name, Integer.parseInt(ratingParts[0]), ratingParts[1]);
		        }
	        }
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}
