package ProjectFilms;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class AnimatedFilm extends Films {
	
	private List<Animator> animators;
	private List<AnimatedRating> ratings;
	private int age;
	private static List<Animator> allAnimators = new ArrayList<Animator>();
	
	AnimatedFilm(String name, String director, int year, int recommendedAge){
		super.name = name;
		super.director = director;
		super.year = year;
		age = recommendedAge;
		animators = new ArrayList<Animator>();
		ratings = new ArrayList<AnimatedRating>();
	}
	
	public static Animator findAnimator(String animatorName) {
		for(Animator animator : allAnimators) {
			if(animator.getName().equals(animatorName))
				return animator;
		}
		return null;
	}
	
	public static void editAge(String filmName, int newAge) {
		Films film = findFilm(filmName);
		((AnimatedFilm)film).age = newAge;
	}
	
	@Override
	public String toString() {
		return "\nFilm: " + name + ", Director: " + director + ", Year: " + year + ", Recommended age: " + age + "\nAnimators: " + animators;
	}
	
	public static List<Animator> getAnimators(String filmName) {
		Films film = findFilm(filmName);
		if(film == null)
			return null;
		return ((AnimatedFilm)film).animators;
	}
	
	public static List<Animator> getAllAnimators(){
		return allAnimators;
	}
	
	public static List<Animator> getAnimatorsWithMoreThanOneFilm(){
		List<Animator> list = new ArrayList<Animator>();
		for(Animator animator : allAnimators) {
			if(animator.getFilms().size() > 1) {
				list.add(animator);
			}
		}
		return list;
	}
	
	public static void addAnimator(String filmName, String animatorName) {
		if(allAnimators.isEmpty()) {
			allAnimators.add(new Animator(animatorName));
		}
		Films film = findFilm(filmName);
		Animator animator = findAnimator(animatorName);
		if(animator != null) {
			((AnimatedFilm)film).animators.add(animator);
			animator.addFilm(film);
		}
		else {
			allAnimators.add(new Animator(animatorName));
			animator = findAnimator(animatorName);
			((AnimatedFilm)film).animators.add(animator);
			animator.addFilm(film);
		}
	}
	
	public static int removeAnimator(String filmName, String animatorName) {
		Films film = findFilm(filmName);
		Animator animator = findAnimator(animatorName);
		if(animator != null) {
			((AnimatedFilm)film).animators.remove(animator);
			animator.removeFilm(film);
			return 1;
		}
		return 0;
	}
	
	public static void addRating(String filmName, int points) {
		Films film = findFilm(filmName);
		if(film == null)
			return;
		((AnimatedFilm)film).ratings.add(new AnimatedRating(points));
	}
	
	public static void addRating(String filmName, int points, String comment) {
		Films film = findFilm(filmName);
		if(film == null)
			return;
		((AnimatedFilm)film).ratings.add(new AnimatedRating(points, comment));
	}
	
	public static List<AnimatedRating> getRatings(String filmName) {
		Films film = findFilm(filmName);
		if(film == null)
			return null;
		Collections.sort(((AnimatedFilm)film).ratings);
		return ((AnimatedFilm)film).ratings;
	}
	
	
	
	public static int loadFromAnimatedFile(String fileName) {
	    FeatureFilm featureFilm = null;
	    try {
	        FileReader fr = new FileReader(fileName);
	        BufferedReader br = new BufferedReader(fr);
	        String line = br.readLine();
	        String[] parts = line.split(";");
	        String name = parts[0];
	        if(findFilm(name) != null) {
	        	br.close();
	        	return 0;
	        }
	        String director = parts[1];
	        int year = Integer.parseInt(parts[2]);
	        featureFilm = new FeatureFilm(name, director, year);
	        Films.add(featureFilm);
	        String[] actorNames = parts[3].split(",");
	        for (String actorName : actorNames) {
	            Actor actor = FeatureFilm.findActor(actorName);
	            if (actor == null) {
	                actor = new Actor(actorName);
	                FeatureFilm.getAllActors().add(actor);
	                featureFilm.actors.add(actor);
	                actor.addFilm(featureFilm);
	            }
	        }
	        String[] ratings = parts[4].split("\\$");
	        
	        String[] ratingParts;
	        for (String rating : ratings) {
	        	 ratingParts = rating.split("#");
	        	if(ratingParts[1].equals(" "))
	        		featureFilm.ratings.add(new FeatureRating(Integer.parseInt(ratingParts[0])));
	        	else
	        	featureFilm.ratings.add(new FeatureRating(Integer.parseInt(ratingParts[0]),ratingParts[1]));
	        }

	        br.close();
	        return 1;
	    } catch (IOException e) {
	        return 0;
	    }
	}
}
